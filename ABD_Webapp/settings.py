"""
Django settings for ABD_Webapp project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
import os
import subprocess
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# get current version
version = subprocess.check_output(['git', '--git-dir', f'{os.path.realpath(BASE_DIR)}/.git', 'describe']).decode(
    'ascii').strip()

APP_VERSION_NUMBER = version

file = open(os.path.join(BASE_DIR, 'config.json'))
json_config = json.load(file)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = json_config["secret_key"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = json_config['debug']

ALLOWED_HOSTS = json_config["db_allowed_hosts"]

# Application definition

INSTALLED_APPS = [
    'abd_database.apps.AbdDatabaseConfig',
    'abd_management.apps.AbdManagementConfig',
    'jobqueue_manager.apps.JobqueueManagerConfig',
    'abd_predictions.apps.AbdPredictionsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'timescale',
    'rest_framework',
    'abd_api_database', 
    'abd_api_management', 
    'corsheaders',
    'django_filters',
    'oauth2_provider'
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "abd_management.middleware.DatabaseUserSwitchMiddleware",
    "abd_management.middleware.RlsMiddleware",
]

AUTHENTICATION_BACKENDS = (
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend', # this is default
    'guardian.backends.ObjectPermissionBackend',
)

ROOT_URLCONF = 'ABD_Webapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [(os.path.join(BASE_DIR, 'templates')), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'abd_database.context_processors.selected_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'ABD_Webapp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': json_config["db_engine"],
        'NAME': json_config["db_name"],
        'USER': json_config["db_user"],
        'PASSWORD': json_config["db_pwd"],
        'HOST': json_config["db_host"],
        'PORT': json_config["db_port"],
        'TEST': {
            "TEMPLATE": "template0"
        }
    },
    'admin': {
        'ENGINE': json_config["db_engine"],
        'NAME': json_config["db_name"],
        'USER': json_config["db_admin_user"],
        'PASSWORD': json_config["db_admin_pwd"],
        'HOST': json_config["db_host"],
        'PORT': json_config["db_port"],
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'

STATIC_ROOT = (
    os.path.join(BASE_DIR, 'static')
)

MEDIA_URL = '/media/'

MEDIA_ROOT = (
    os.path.join(BASE_DIR, 'media')
)

LOG_URL = '/logs/'

LOG_ROOT = (
    os.path.join(BASE_DIR, 'logs')
)

if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)
if not os.path.exists(os.path.join(MEDIA_ROOT, 'uploadfiles')):
    os.makedirs(os.path.join(MEDIA_ROOT, 'uploadfiles'))
if not os.path.exists(LOG_ROOT):
    os.makedirs(LOG_ROOT)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '[%(asctime)s] [%(levelname)s] %(message)s',
        }
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_ROOT, 'abd_extractor.log'),
            'when': 'W0',
            'backupCount': 24,
            'formatter': 'standard'
        }
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': True
        }
    }
}
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'abd_management.User'

LOGOUT_REDIRECT_URL = 'abd_management:index'
LOGIN_REDIRECT_URL = 'abd_management:index'

REST_FRAMEWORK = {
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ],
}

PUBLIC_DATA_ADMIN_ORG_NAME = "Public dataset administration"

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
}

CORS_ORIGIN_ALLOW_ALL = True