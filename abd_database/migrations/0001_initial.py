# Generated by Django 3.2.8 on 2022-06-09 11:20
from django.core.management import call_command

import abd_database.helpers.basicHelper
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import timescale.db.models.fields


def load_fixtures(apps, schema_editor):
    call_command('loaddata', 'data.json', app_label='abd_database')


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AggData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cycle_id', models.IntegerField()),
                ('charge_capacity', models.FloatField(blank=True, null=True)),
                ('discharge_capacity', models.FloatField(blank=True, null=True)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('charge_c_rate', models.FloatField(blank=True, null=True)),
                ('discharge_c_rate', models.FloatField(blank=True, null=True)),
                ('ambient_temperature', models.FloatField(blank=True, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('min_voltage', models.FloatField()),
                ('max_voltage', models.FloatField()),
                ('error_codes', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Missing Cycles'), (2, 'Utc Gap'), (3, 'No Real Cycle'), (4, 'Cycle Deleted'), (5, 'Jump In Time')]), blank=True, null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Battery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=128, unique=True)),
                ('weight', models.FloatField()),
                ('vnom', models.FloatField(blank=True, null=True)),
                ('vmax', models.FloatField()),
                ('vmin', models.FloatField()),
                ('comments', models.CharField(blank=True, max_length=512, null=True)),
                ('name_isSet', models.BooleanField(default=False, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='CellTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment', models.CharField(blank=True, max_length=256, null=True)),
                ('date', models.DateField()),
                ('battery', models.ForeignKey(db_column='battery_id', on_delete=django.db.models.deletion.CASCADE, related_name='cell_test', to='abd_database.battery')),
            ],
        ),
        migrations.CreateModel(
            name='ChemicalType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortname', models.CharField(max_length=16)),
                ('synonyms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=16), blank=True, null=True, size=None)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CylinderISONorm',
            fields=[
                ('iso_number', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
                ('height', models.FloatField()),
                ('diameter', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrismaISONorm',
            fields=[
                ('iso_number', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
                ('height', models.FloatField()),
                ('width', models.FloatField()),
                ('length', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Proportion',
            fields=[
                ('proportions', models.CharField(max_length=16, primary_key=True, serialize=False, validators=[abd_database.helpers.basicHelper.validate_proportions])),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('city', models.CharField(blank=True, max_length=256, null=True)),
                ('country', models.CharField(blank=True, max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UploadBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Hdf5File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='hdf5files')),
                ('kb', models.PositiveIntegerField()),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='abd_database.uploadbatch')),
            ],
        ),
        migrations.CreateModel(
            name='EISTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.CharField(blank=True, max_length=512, null=True)),
                ('voltage', models.FloatField()),
                ('temperature', models.FloatField()),
                ('cellTest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='eistest_test_type', to='abd_database.celltest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EISData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('z_real', models.FloatField()),
                ('z_im', models.FloatField()),
                ('agg_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abd_database.aggdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('url', models.CharField(blank=True, max_length=512, null=True)),
                ('doi', models.CharField(blank=True, max_length=512, null=True)),
                ('license', models.CharField(blank=True, max_length=512, null=True)),
                ('authors', models.CharField(blank=True, max_length=512, null=True)),
                ('organisation', models.CharField(max_length=256)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('name', 'url', 'doi', 'license', 'authors', 'organisation')},
            },
        ),
        migrations.CreateModel(
            name='CyclingTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.CharField(blank=True, max_length=512, null=True)),
                ('cellTest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cyclingtest_test_type', to='abd_database.celltest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CyclingRawData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('voltage', models.FloatField()),
                ('cycle_id', models.PositiveIntegerField()),
                ('step_flag', models.IntegerField()),
                ('time_in_step', models.FloatField(null=True)),
                ('current', models.FloatField()),
                ('capacity', models.FloatField()),
                ('energy', models.FloatField()),
                ('cell_temperature', models.FloatField(blank=True, null=True)),
                ('ambient_temperature', models.FloatField(blank=True, null=True)),
                ('agg_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abd_database.aggdata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='celltest',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abd_database.dataset'),
        ),
        migrations.CreateModel(
            name='BatteryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specific_type', models.CharField(default='UNKNOWN', max_length=256)),
                ('theoretical_capacity', models.FloatField()),
                ('object_id', models.PositiveIntegerField()),
                ('cathode_proportions', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='abd_database.proportion')),
                ('chemical_type_cathode', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='chemical_type_cathode', to='abd_database.chemicaltype')),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(), models.Q(('app_label', 'abd_database'), ('model', 'prismaformat')), models.Q(('app_label', 'abd_database'), ('model', 'cylinderformat')), _connector='OR'), on_delete=django.db.models.deletion.RESTRICT, to='contenttypes.contenttype')),
                ('supplier', models.ForeignKey(default=1, on_delete=django.db.models.deletion.RESTRICT, to='abd_database.supplier')),
            ],
            options={
                'unique_together': {('supplier', 'specific_type', 'theoretical_capacity', 'content_type', 'object_id', 'cathode_proportions')},
            },
        ),
        migrations.AddField(
            model_name='battery',
            name='anode_proportions',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='abd_database.proportion'),
        ),
        migrations.AddField(
            model_name='battery',
            name='battery_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='abd_database.batterytype'),
        ),
        migrations.AddField(
            model_name='battery',
            name='chemical_type_anode',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='chemical_type_anode', to='abd_database.chemicaltype'),
        ),
        migrations.AddField(
            model_name='aggdata',
            name='cycling_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abd_database.cyclingtest'),
        ),
        migrations.CreateModel(
            name='PrismaFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('format_type', models.CharField(max_length=32)),
                ('height', models.FloatField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('width', models.FloatField(blank=True, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(), models.Q(('app_label', 'abd_database'), ('model', 'prismaisonorm')), models.Q(('app_label', 'abd_database'), ('model', 'cylinderisonorm')), _connector='OR'), null=True, on_delete=django.db.models.deletion.RESTRICT, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'unique_together': {('name', 'format_type')},
            },
        ),
        migrations.CreateModel(
            name='CylinderFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('format_type', models.CharField(max_length=32)),
                ('height', models.FloatField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('diameter', models.FloatField()),
                ('content_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(), models.Q(('app_label', 'abd_database'), ('model', 'prismaisonorm')), models.Q(('app_label', 'abd_database'), ('model', 'cylinderisonorm')), _connector='OR'), null=True, on_delete=django.db.models.deletion.RESTRICT, to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'unique_together': {('name', 'format_type')},
            },
        ),
        migrations.AddConstraint(
            model_name='aggdata',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('charge_capacity__isnull', False), ('charge_c_rate__isnull', False), ('discharge_capacity__isnull', True), ('discharge_c_rate__isnull', True)), models.Q(('charge_capacity__isnull', True), ('charge_c_rate__isnull', True), ('discharge_capacity__isnull', False), ('discharge_c_rate__isnull', False)), models.Q(('charge_capacity__isnull', False), ('charge_c_rate__isnull', False), ('discharge_capacity__isnull', False), ('discharge_c_rate__isnull', False)), _connector='OR'), name='charge_or_discharge'),
        ),
        migrations.RunPython(load_fixtures)
    ]
