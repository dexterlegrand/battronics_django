# Generated by Django 4.0.4 on 2023-10-02 13:10

from django.db import migrations, models
import django.db.models.deletion

from django.conf import settings


def activate_row_level_security(table):
    return f"ALTER TABLE {table} ENABLE ROW LEVEL SECURITY; " \
           f"ALTER TABLE {table} FORCE ROW LEVEL SECURITY;"


# TODO: which batteries can be seen: all other public admin? all that are marked as public?
# could make sense to even set battery as not public even if data is public, since one could share data without sharing
# all meta data

sql_policy_battery_select = f"CREATE POLICY owner_access ON abd_database_battery " \
                            f"FOR SELECT USING ((owner_id::TEXT = current_setting('abd.active_tenant')::TEXT) " \
                            f"OR (id::TEXT = current_setting('abd.change_owner_battid')::TEXT) " \
                            f"OR (private = False))"
# id clause needed for owner change


sql_policy_battery_insert = "CREATE POLICY insert_policy ON abd_database_battery " \
                            "FOR INSERT " \
                            "WITH CHECK (owner_id::TEXT = current_setting('abd.active_tenant')::TEXT)"

sql_policy_battery_update = "CREATE POLICY update_policy ON abd_database_battery " \
                            "FOR UPDATE " \
                            "USING (owner_id::TEXT = current_setting('abd.active_tenant')::TEXT) " \
                            "WITH CHECK ((owner_id::TEXT = current_setting('abd.active_tenant')::TEXT) OR " \
                            "(id::TEXT = current_setting('abd.change_owner_battid')::TEXT))"  # needed for owner change

sql_policy_battery_delete = "CREATE POLICY delete_owner_access ON abd_database_battery " \
                            "FOR DELETE " \
                            "USING (owner_id::TEXT = current_setting('abd.active_tenant')::TEXT)"


def set_battery_default_owner(apps, schema_editor):
    # Set owner id to Public Administrator Organisation id before AlterField
    # to avoid ForeignKey constraint conflicts.
    Battery = apps.get_model("abd_database", "Battery")
    Organisation = apps.get_model("abd_management", "Organisation")

    pub_admin = Organisation.objects.get(name=settings.PUBLIC_DATA_ADMIN_ORG_NAME)

    for batt in Battery.objects.all():
        batt.owner_id = pub_admin.id
        batt.save()


class Migration(migrations.Migration):
    dependencies = [
        ('abd_management', '0006_configure_rls'),
        ('abd_database', '0013_configure_rls'),
    ]

    operations = [
        migrations.AddField(
            model_name='battery',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT,
                                    to='abd_management.organisation'),
        ),
        migrations.RunPython(set_battery_default_owner),
        migrations.AlterField(
            model_name='battery',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT,
                                    to='abd_management.organisation'),
        ),
        migrations.AddField(
            model_name='battery',
            name='private',
            field=models.BooleanField(default=True),
        ),
        migrations.RunSQL(sql=activate_row_level_security("abd_database_battery")),
        migrations.RunSQL(sql=sql_policy_battery_select),
        migrations.RunSQL(sql=sql_policy_battery_insert),
        migrations.RunSQL(sql=sql_policy_battery_update),
        migrations.RunSQL(sql=sql_policy_battery_delete),
    ]
